#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> [<filename-base>]" cr
  ."Creates a new manual resolver in the specified workchain, with the controlling private key saved to or loaded from <filename-base>.pk "
  ."('new-resolver.pk' by default)" cr 
} : usage
$# 2- -2 and ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument

def? $2 { @' $2 } { "new-resolver" } cond constant file-base
65536 constant timeout   // init query times out in 65536 seconds

."Creating new manual resolver in workchain " wc . 

// Create new manual resolver; source code included from `4.fif`
"4.fif" include

<b 
    file-base +".pk" load-generate-keypair 
    constant resolver_pk B, 
    <{ NEWDICT }>s runvmcode drop dict,
b> // initial data

null // no libraries

<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // create StateInit

dup ."StateInit: " <s csr. cr
dup hashu wc swap 2dup 2constant resolver_addr
."new resolver address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
now timeout + 32 << 1- dup =: query_id
."Init query_id is " dup . ."(0x" X._ .")" cr


<b query_id 64 u, 1 32 i, <b 1000 256 u, b> ref, b>
dup ."signing message: " <s csr. cr
dup hashu resolver_pk ed25519_sign_uint rot

<b b{1000100} s,
resolver_addr addr, // append addr
b{000010} s,
swap 
<s s, // append initial state
b{0} s, 
swap B, // append signature
swap <s s, // append msg
b>


dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file // saves query
."(Saved resolver creating query to file " type .")" cr
